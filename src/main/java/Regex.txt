





{@code true} null, {@code false} not null


{@code true} yes, {@code false} no


{@code true} success, {@code false} fail


{@code true} operation successfully, {@code false} operation failed


final


@return


@param


@param \w+[\s]+\w+


\n[\s]+\*\n


// 匹配 是否 // === 中文或数字英文等 =
// ==== [\w\u0391-\uFFE5]{1,1000}[\s]+[=]+
// [=]+[\s]+[\sA-Za-z0-9_-\u0391-\uFFE5]+[\s][\s]{0,100}=+

\n \* Created by Ttt\n \* [=]+


// 匹配接口
(private|public) interface


// 匹配抽象类
(private|public) (static)? abstract


// 匹配变量非静态非常量
(protected|private|public) [\w\[\]\<\?\>,.]+ [\w\[\]\<\?\>,.]+(( =)|(;))


// 匹配变量非静态
(protected|private|public) final [\w\[\]\<\?\>,.]+ [\w\[\]\<\?\>,.]+(( =)|(;))


// 匹配变量非常量
(protected|private|public) static [\w\[\]\<\?\>,.]+ [\w\[\]\<\?\>,.]+(( =)|(;))


// 匹配变量
(protected|private|public) static final [\w\[\]\<\?\>,.]+ [\w\[\]\<\?\>,.]+(( =)|(;))


[^TAG]

[。、，]

// 判断属于 Long 类型赋值小写 l
[0-9.]+(l);

 [0-9.]+(l)

[0-9.]+(l)

[0-9.]+(l)\)

,[ ]?[0-9.]+(l)

[0-9.]+(l)[^A-Za-z]


// 判断数组
int i(( =)|(;))


int i = [\w]+,


// 匹配 boolean 方法名(
boolean [\w]+[ ]?\(

// ============
// = 匹配方法 =
// ============


// 查找私有静态方法
private static [\w\[\]\<\?\>,.]+ [\w]+\(


// 查找私有静态遍历
private static (final )?[\w\[\]\<\?\>,.]+ [\w]+[ ]?=[ ]?


// 存在 void
[^((return )|(= new))]+[static]?[\w\[\]\<\?\>.]+ [T ]{0,2}[\w]+\(


// 不存在 void
[^((return )|(= new|void))][static]?[\w\[\]\<\?\>.]+ [T ]{0,2}[\w]+\(


// 匹配有 @return 但是没填写返回信息
@return[\s]+[^\w\u0391-\uFFE5\@\{]{1,1000}


// 有返回参数, 但是并没有填写 @return
@param[\w\s\[\]\<\?\>,.\u0391-\uFFE5]{0,10000}[\s]+\*/[\n]?([\w\[\]\<\?\>,. ](?!void))+[ ][\w\[\]\<\?\>,.]+\(



[\w\[\]\<\?\>,.]



// 匹配方法参数不属于常量
[^((return)|(new|void)][\s]{1}[\w]+\(([^final][,\w]+ [,\w]+)\)[\s]+\{


[\w\<\?\>, .]+[^((return)|(new|void)][\s]{1}[\w]+\([,\w\<\?\>]+ [,\w]+[(final), \w\<\?\>]+




// 以下方法无用

// 匹配了属于方法
[^((return)|(= new)][ ]?[\w\[\]\<\?\>]+[ ]{1}[\w\[\]\<\?\>]+[ ]?\(


[^final][\w\[\]\<\?\>,.]+[\w\[\]\<\?\>,. ]?[ ]?


([^final][\w\[\]\<\?\>,.]+[\w\[\]\<\?\>,. ]?[ ]?)+\)[ ]?\{


// 匹配方法名 包含 xxxToxx 的方法
[\w]+(To)[\w]+[ ]?\([\w\[\]\<\?\>,. ]+\)[ ]?\{







\n[\s]+\*\n


[\u0391-\uFFE5A-Za-z0-9]{0,10000}[,，]+[\u0391-\uFFE5A-Za-z0-9]+


[\u0391-\uFFE5A-Za-z0-9]+[,，]+\n


[,，][\u0391-\uFFE5A-Za-z0-9]+


[\u0391-\uFFE5]{0,10000}[A-Za-z0-9]+[\u0391-\uFFE5]+


[A-Za-z0-9]+[\u0391-\uFFE5]+


[\u0391-\uFFE5]+[A-Za-z0-9]+


[\u0391-\uFFE5]{0,10000}[A-Za-z0-9]+, [\u0391-\uFFE5]+


[(//)|\*] [\u0391-\uFFE5]{0,10000}[A-Za-z0-9]+, [\u0391-\uFFE5]+


[^-]->




[,][\u0391-\uFFE5A-Za-z0-9]+



// 判断是否中文
[\u0391-\uFFE5\u4e00-\u9fa5]

[\u0391-\uFFE5\u4e00-\u9fa5]


// ======================
// = 正则表达式判断注释 =
// ======================

验证中文 => [\u0391-\uFFE5\u4e00-\u9fa5]

验证数字、字母 => [A-Za-z0-9]

验证正常符号 + 数字 => [A-Za-z0-9，。,._\-\[\]]

验证括号等 => [\(\)\{\}]

// 第一个判断

[\u0391-\uFFE5\u4e00-\u9fa5]*[\(\)\{\}]?[A-Za-z0-9，。,._\-\[\]]+[\(\)\{\}]?[\u0391-\uFFE5\u4e00-\u9fa5]+

[\u0391-\uFFE5\u4e00-\u9fa5]+  [\u0391-\uFFE5\u4e00-\u9fa5\(\)\{\}]?[A-Za-z0-9，。,._\-\[\]]+

[\u0391-\uFFE5]*[\(\)\{\}]?[A-Za-z0-9，。,._\-\[\]]+[\(\)\{\}]?[\u0391-\uFFE5\u4e00-\u9fa5]+

=========

// 1.中文x中文   2.中文 x中文   3.中文x 中文
([\u0391-\uFFE5\u4e00-\u9fa5]*[,.，。A-Za-z0-9_\-\[\]\<\>\(\)]+[\u0391-\uFFE5\u4e00-\u9fa5]+)

([\u0391-\uFFE5\u4e00-\u9fa5]*[ ]+[,.，。A-Za-z0-9_\-\[\]\<\>]+[\u0391-\uFFE5\u4e00-\u9fa5]+)

([\u0391-\uFFE5\u4e00-\u9fa5]*[,.，。A-Za-z0-9_\-\[\]\<\>]+[ ]+[\u0391-\uFFE5\u4e00-\u9fa5]+)



([\u0391-\uFFE5\u4e00-\u9fa5]*[,.，。A-Za-z0-9_\-\[\]\<\>]+[\u0391-\uFFE5\u4e00-\u9fa5]+)|([\u0391-\uFFE5\u4e00-\u9fa5]*[ ]+[,.，。A-Za-z0-9_\-\[\]\<\>]+[\u0391-\uFFE5\u4e00-\u9fa5]+)|([\u0391-\uFFE5\u4e00-\u9fa5]*[,.，。A-Za-z0-9_\-\[\]\<\>]+[ ]+[\u0391-\uFFE5\u4e00-\u9fa5]+)



public (static )?(?!void)


public static (?!void)


// 判断是否使用方法名
[A-Za-z0-9]+Utils.[A-Za-z0-9]+\(



[\u0391-\uFFE5\u4e00-\u9fa5\(\)\{\}]?[A-Za-z0-9，。,._\-\[\]]+  [\u0391-\uFFE5\u4e00-\u9fa5]+
[^@param] [\u0391-\uFFE5\u4e00-\u9fa5\(\)\{\}]?[A-Za-z0-9，。,._\-\[\]]+  [\u0391-\uFFE5\u4e00-\u9fa5]+